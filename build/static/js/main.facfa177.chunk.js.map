{"version":3,"sources":["pomodoro/Button.jsx","utils/duration/index.js","pomodoro/ProgressBar.jsx","pomodoro/DisplayDuration.jsx","pomodoro/StopButton.jsx","pomodoro/Pomodoro.js","utils/class-names/index.js","utils/useInterval/index.js","App.js","index.js"],"names":["ButtonComponent","allTheThings","setAllTheThings","dataTestid","className","clamp","n","min","max","type","data-testid","onClick","newValue","focusVal","focusAdjust","focusMin","focusMax","secondsRemaining","breakVal","breakAdjust","breakMin","breakMax","console","log","disabled","hasStarted","minutesToDuration","givenMinutes","minutes","Math","floor","toString","padStart","ProgressBar","focusSecondsTotal","breakSecondsTotal","percentage","focusBreak","style","height","role","aria-valuemin","aria-valuemax","aria-valuenow","width","DisplayDuration","isTimerRunning","titleText","subTitleText","givenSeconds","seconds","round","secondsToDuration","theHappening","StopButton","setIsTimerRunning","title","Pomodoro","classNameToBoolean","useState","callback","delay","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","Audio","play","value","aria-label","prevState","oi","Object","entries","reduce","classes","concat","undefined","filter","join","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.facfa177.chunk.js","sourcesContent":["import React from \"react\";\n\nexport default function ButtonComponent({\n  allTheThings,\n  setAllTheThings,\n  dataTestid,\n  className,\n}) {\n  function clamp(n, min, max) {\n    return n > max ? max : n < min ? min : n;\n  }\n  const doSomething = () => {\n    if (dataTestid === \"decrease-focus\") {\n      const newValue = clamp(\n        allTheThings.focusVal - allTheThings.focusAdjust,\n        allTheThings.focusMin,\n        allTheThings.focusMax\n      );\n      setAllTheThings({\n        ...allTheThings,\n        focusVal: newValue,\n        secondsRemaining: newValue * 60,\n      });\n    } else if (dataTestid === \"increase-focus\") {\n      const newValue = clamp(\n        allTheThings.focusVal + allTheThings.focusAdjust,\n        allTheThings.focusMin,\n        allTheThings.focusMax\n      );\n      setAllTheThings({\n        ...allTheThings,\n        focusVal: newValue,\n        secondsRemaining: newValue * 60,\n      });\n    } else if (dataTestid === \"decrease-break\") {\n      const newValue = clamp(\n        allTheThings.breakVal - allTheThings.breakAdjust,\n        allTheThings.breakMin,\n        allTheThings.breakMax\n      );\n      setAllTheThings({ ...allTheThings, breakVal: newValue });\n    } else if (dataTestid === \"increase-break\") {\n      const newValue = clamp(\n        allTheThings.breakVal + allTheThings.breakAdjust,\n        allTheThings.breakMin,\n        allTheThings.breakMax\n      );\n      setAllTheThings({ ...allTheThings, breakVal: newValue });\n    }\n    console.log(dataTestid, className);\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-secondary\"\n      data-testid={dataTestid}\n      onClick={doSomething}\n      disabled={allTheThings.hasStarted}\n    >\n      <span className={className} />\n    </button>\n  );\n}\n","/**\n * Formats a number of minutes as 'mm:00'.\n *\n * For example,\n *    minutesToDuration(3) = '03:00'\n *    minutesToDuration(45) = '45:00'\n *\n * @param givenMinutes\n *    the number of minutes in the duration\n * @returns {string}\n *    the given minutes formatted as 'mm:00'\n */\n\nexport function minutesToDuration(givenMinutes) {\n  const minutes = Math.floor(givenMinutes).toString().padStart(2, \"0\");\n  return `${minutes}:00`;\n}\n\n/**\n * Formats a number of seconds as 'mm:ss'.\n *\n * For example,\n *    secondsToDuration(305) = '05:05'\n *    secondsToDuration(930) = '15:30'\n *\n * @param givenSeconds\n *    the number of seconds in the duration\n * @returns {string}\n *    the given seconds formatted as 'mm:ss'\n */\n\nexport function secondsToDuration(givenSeconds) {\n  const minutes = Math.floor((givenSeconds % 3600) / 60)\n    .toString()\n    .padStart(2, \"0\");\n  const seconds = Math.round(givenSeconds % 60)\n    .toString()\n    .padStart(2, \"0\");\n  return `${minutes}:${seconds}`;\n}\n","import React from \"react\";\n\nexport default function ProgressBar({ allTheThings }) {\n  \n  const focusSecondsTotal = allTheThings.focusVal * 60;\n  const breakSecondsTotal = allTheThings.breakVal * 60;\n\n  let percentage = 0;\n\n  if (allTheThings.focusBreak) {\n    percentage = 100 - ((allTheThings.secondsRemaining / focusSecondsTotal) * 100)\n  } else {\n    percentage = 100 - ((allTheThings.secondsRemaining / breakSecondsTotal) * 100)\n  }\n  \n  return (\n    <div className=\"row mb-2\">\n      <div className=\"col\">\n        <div className=\"progress\" style={{ height: \"20px\" }}>\n          <div\n            className=\"progress-bar\"\n            role=\"progressbar\"\n            aria-valuemin=\"0\"\n            aria-valuemax=\"100\"\n            aria-valuenow={percentage} // TODO: Increase aria-valuenow as elapsed time increases\n            style={{ width: `${percentage}%` }} // TODO: Increase width % as elapsed time increases\n          />\n        </div>\n      </div>\n    </div>\n  );\n}\n","import React from \"react\";\nimport { minutesToDuration, secondsToDuration } from \"../utils/duration\";\nimport ProgressBar from \"./ProgressBar\";\n\nexport default function DisplayDuration({ isTimerRunning, allTheThings }) {\n  function theHappening() {\n    let titleText = \"\";\n    if (allTheThings.focusBreak) {\n      titleText = `Focusing for ${minutesToDuration(\n        allTheThings.focusVal\n      )} minutes`;\n    } else if (!allTheThings.focusBreak) {\n      titleText = `On Break for ${minutesToDuration(\n        allTheThings.breakVal\n      )} minutes`;\n    }\n\n    let subTitleText = `${secondsToDuration(\n      allTheThings.secondsRemaining\n    )} remaining`;\n\n    return (\n      <>\n        <div className=\"row mb-2\">\n          <div className=\"col\">\n            {/* TODO: Update message below to include current session (Focusing or On Break) and total duration */}\n            <h2 data-testid=\"session-title\">{titleText}</h2>\n            {/* TODO: Update message below to include time remaining in the current session */}\n            <p className=\"lead\" data-testid=\"session-sub-title\">\n              {subTitleText}\n            </p>\n          </div>\n        </div>\n        {isTimerRunning ? null : <h2>PAUSED</h2>}\n        <ProgressBar allTheThings={allTheThings}/>\n      </>\n    );\n  }\n\n  if (allTheThings.hasStarted) {\n  return theHappening();\n  } else {\n  return null;\n  }\n}\n","import React from \"react\";\n\nexport default function StopButton({\n  allTheThings,\n  setAllTheThings,\n  setIsTimerRunning,\n}) {\n  const doTheMagic = () => {\n    if (allTheThings.hasStarted === true) {\n      setAllTheThings({\n        ...allTheThings,\n        hasStarted: false,\n        focusBreak: 1,\n        secondsRemaining: allTheThings.focusVal * 60,\n      });\n      setIsTimerRunning(false);\n    }\n  };\n\n  return (\n    <button\n      type=\"button\"\n      className=\"btn btn-secondary\"\n      title=\"Stop the session\"\n      onClick={doTheMagic}\n    >\n      <span className=\"oi oi-media-stop\" />\n    </button>\n  );\n}\n","import React, { useState } from \"react\";\nimport classNames from \"../utils/class-names\";\nimport useInterval from \"../utils/useInterval\";\nimport ButtonComponent from \"./Button\";\nimport DisplayDuration from \"./DisplayDuration\";\nimport StopButton from \"./StopButton\";\n\nfunction Pomodoro() {\n  // Timer starts out paused\n  const [isTimerRunning, setIsTimerRunning] = useState(false);\n  // define variable to hold object of all integer values possible by button press\n  const [allTheThings, setAllTheThings] = useState({\n    focusAdjust: 5,\n    breakAdjust: 1,\n    focusVal: 25,\n    focusMin: 5,\n    focusMax: 60,\n    breakVal: 5,\n    breakMin: 1,\n    breakMax: 15,\n    focusBreak: 1, // determine whether on focus or break: boolean\n    secondsRemaining: 25 * 60,\n    hasStarted: false, // the first time play is pressed, it should switch to true, stop switches to false\n  });\n\n  useInterval(\n    () => {\n      // if focusBreak is true (on focus) and secondsRemaining is 0,\n      // change focusBreak to false (on break)\n      // then set secondsRemaining to breakVal * 60. play the sound.\n      // and vice versa\n\n      if (allTheThings.focusBreak && allTheThings.secondsRemaining === 0) {\n        setAllTheThings({\n          ...allTheThings,\n          focusBreak: 0,\n          secondsRemaining: allTheThings.breakVal * 60,\n        });\n        new Audio(`https://vgmsite.com/soundtracks/donkey-kong-country-snes/zzprueftal/23%20Fanfare.mp3`).play();\n      } else if (\n        !allTheThings.focusBreak &&\n        allTheThings.secondsRemaining === 0\n      ) {\n        setAllTheThings({\n          ...allTheThings,\n          focusBreak: 1,\n          secondsRemaining: allTheThings.focusVal * 60,\n        });\n        new Audio(`https://vgmsite.com/soundtracks/donkey-kong-country-snes/tzzbepdfam/29%20Extra%20Life%20Balloon.mp3`).play();\n      } else {\n        setAllTheThings({\n          ...allTheThings,\n          secondsRemaining: allTheThings.secondsRemaining - 1,\n        });\n      }\n    },\n    isTimerRunning ? 1000 : null\n  );\n\n  function playPause() {\n    if (!allTheThings.hasStarted) {\n      setAllTheThings({ ...allTheThings, hasStarted: true });\n    }\n    setIsTimerRunning((prevState) => !prevState);\n  }\n\n  return (\n    <div className=\"pomodoro\">\n      <div className=\"row\">\n        <div className=\"col\">\n          <div className=\"input-group input-group-lg mb-2\">\n            <span\n              className=\"input-group-text\"\n              data-testid=\"duration-focus\"\n              value=\"duration-focus\"\n            >\n              Focus Duration:{\" \"}\n              {allTheThings.focusVal >= 10\n                ? allTheThings.focusVal\n                : `0${allTheThings.focusVal}`}\n              :00\n            </span>\n            <div className=\"input-group-append\">\n              {/* TODO: Implement decreasing focus duration and disable during a focus or break session */}\n              <ButtonComponent\n                allTheThings={allTheThings}\n                setAllTheThings={setAllTheThings}\n                dataTestid=\"decrease-focus\"\n                className=\"oi oi-minus\"\n              />\n              {/* TODO: Implement increasing focus duration  and disable during a focus or break session */}\n              <ButtonComponent\n                allTheThings={allTheThings}\n                setAllTheThings={setAllTheThings}\n                dataTestid=\"increase-focus\"\n                className=\"oi oi-plus\"\n              />\n            </div>\n          </div>\n        </div>\n        <div className=\"col\">\n          <div className=\"float-right\">\n            <div className=\"input-group input-group-lg mb-2\">\n              <span className=\"input-group-text\" data-testid=\"duration-break\">\n                {/* TODO: Update this text to display the current break session duration */}\n                Break Duration:{\" \"}\n                {allTheThings.breakVal >= 10\n                  ? allTheThings.breakVal\n                  : `0${allTheThings.breakVal}`}\n                :00\n              </span>\n              <div className=\"input-group-append\">\n                {/* TODO: Implement decreasing break duration and disable during a focus or break session*/}\n                <ButtonComponent\n                  allTheThings={allTheThings}\n                  setAllTheThings={setAllTheThings}\n                  dataTestid=\"decrease-break\"\n                  className=\"oi oi-minus\"\n                />\n                {/* TODO: Implement increasing break duration and disable during a focus or break session*/}\n                <ButtonComponent\n                  allTheThings={allTheThings}\n                  setAllTheThings={setAllTheThings}\n                  dataTestid=\"increase-break\"\n                  className=\"oi oi-plus\"\n                />\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n      <div className=\"row\">\n        <div className=\"col\">\n          <div\n            className=\"btn-group btn-group-lg mb-2\"\n            role=\"group\"\n            aria-label=\"Timer controls\"\n          >\n            <button\n              type=\"button\"\n              className=\"btn btn-primary\"\n              data-testid=\"play-pause\"\n              title=\"Start or pause timer\"\n              onClick={playPause}\n            >\n              <span\n                className={classNames({\n                  oi: true,\n                  \"oi-media-play\": !isTimerRunning,\n                  \"oi-media-pause\": isTimerRunning,\n                })}\n              />\n            </button>\n            {/* TODO: Implement stopping the current focus or break session and disable when there is no active session */}\n            <StopButton\n              allTheThings={allTheThings}\n              setAllTheThings={setAllTheThings}\n              setIsTimerRunning={setIsTimerRunning}\n            />\n          </div>\n        </div>\n      </div>\n      <div>\n        {/* TODO: This area should show only when a focus or break session is running or pauses */}\n        {/* possibly stick this section in a different component/file??? */}\n        {/* or just delete it in a state magic trick */}\n        <DisplayDuration\n          isTimerRunning={isTimerRunning}\n          allTheThings={allTheThings}\n        />\n      </div>\n    </div>\n  );\n}\n\nexport default Pomodoro;\n","/**\n * Use this function to dynamically assign the className property of react components.\n *\n * Usage:\n *\n *  <span className={classNames({\n *               \"oi\": true,\n *               \"oi-media-play\": currentState.isPaused,\n *               'oi-media-pause': !currentState.isPaused\n *             })}/>\n *\n *   if currentState.isPaused === true, the className will be \"oi oi-media-play\" otherwise it will be \"oi oi-media-pause\"\n *\n * @param classNameToBoolean\n *    a map of a class name to a boolean value. If the boolean value is `true`, the class name is included, otherwise it is excluded.\n * @returns {string}\n *    a space delimited string of the class names which have a value of `true`.\n */\nexport default function classNames(classNameToBoolean) {\n  return Object.entries(classNameToBoolean)\n    .reduce(\n      (classes, [className, value]) =>\n        classes.concat(value ? className : undefined),\n      []\n    )\n    .filter((className) => className !== undefined)\n    .join(\" \");\n}\n","// This custom hook is from: https://overreacted.io/making-setinterval-declarative-with-react-hooks/\n\nimport { useEffect, useRef } from \"react\";\n\nexport default function useInterval(callback, delay) {\n  console.log(callback)\n  const savedCallback = useRef();\n\n  // Remember the latest callback.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n","import React from \"react\";\nimport \"./App.css\";\nimport Pomodoro from \"./pomodoro/Pomodoro\";\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <header className=\"App-header container\">\n        <h1>Pomodoro Timer</h1>\n      </header>\n      <div className=\"container\">\n        <Pomodoro />\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n"],"sourceRoot":""}